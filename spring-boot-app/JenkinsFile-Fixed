pipeline {
  agent any
  tools {
    maven 'maven' // Ensure Maven is installed and configured in Jenkins
  }
  environment {
    SLACK_CHANNEL = '#devops'
    SLACK_CREDENTIAL_ID = 'slack'
  }
  
  stages {
    stage('Pipeline Started') {
      steps {
        script {
          echo "üöÄ Pipeline Started"
          echo "Job: ${JOB_NAME}"
          echo "Build: #${BUILD_NUMBER}"
          echo "Branch: master"
          echo "Build URL: ${BUILD_URL}"
          
          // Try Slack notification but don't fail pipeline if it fails
          try {
            if (env.SLACK_CREDENTIAL_ID) {
              slackSend(
                channel: env.SLACK_CHANNEL,
                color: '#36a64f',
                message: ":jenkins: *Pipeline Started* :rocket:\n" +
                         "*Job:* ${JOB_NAME}\n" +
                         "*Build:* #${BUILD_NUMBER}\n" +
                         "*Branch:* master\n" +
                         "*Build URL:* ${BUILD_URL}",
                tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                failOnError: false
              )
            }
          } catch (Exception e) {
            echo "‚ö†Ô∏è Slack notification failed (continuing pipeline): ${e.getMessage()}"
          }
        }
      }
    }
    
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/khaledhawil/Java-app-CI-CD-with-GitOps.git'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
      post {
        success {
          script {
            echo "‚úÖ Build and Test Completed Successfully"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CHANNEL,
                  color: 'good',
                  message: ":white_check_mark: *Build and Test Completed* :hammer_and_wrench:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* SUCCESS :tada:\n" +
                           "*Artifact:* spring-boot-web.jar created",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
        failure {
          script {
            echo "‚ùå Build and Test Failed"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CHANNEL,
                  color: 'danger',
                  message: ":x: *Build and Test Failed* :warning:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* FAILED",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://sonarqube:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
      post {
        success {
          script {
            echo "‚úÖ SonarQube Analysis Completed"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CHANNEL,
                  color: 'good',
                  message: ":white_check_mark: *SonarQube Analysis Completed* :chart_with_upwards_trend:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* SUCCESS :tada:\n" +
                           "*SonarQube Dashboard:* ${SONAR_URL}/dashboard?id=com.abhishek%3Aspring-boot-demo",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
        failure {
          script {
            echo "‚ùå SonarQube Analysis Failed"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CHANNEL,
                  color: 'danger',
                  message: ":x: *SonarQube Analysis Failed* :warning:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* FAILED",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "khaledhawil/java-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-hub')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            sh 'echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin'
            sh 'docker push ${DOCKER_IMAGE}'
        }
      }
      post {
        success {
          script {
            echo "‚úÖ Docker Image Built and Pushed Successfully"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CHANNEL,
                  color: 'good',
                  message: ":docker: *Docker Image Built & Pushed Successfully* :ship:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* SUCCESS :white_check_mark:\n" +
                           "*Docker Image:* khaledhawil/java-cicd:${BUILD_NUMBER}\n" +
                           "*Registry:* Docker Hub",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
        failure {
          script {
            echo "‚ùå Docker Build/Push Failed"
            try {
              if (env.SLACK_CREDENTIAL_ID) {
                slackSend(
                  channel: env.SLACK_CREDENTIAL_ID,
                  color: 'danger',
                  message: ":x: *Docker Build/Push Failed* :warning:\n" +
                           "*Job:* ${JOB_NAME}\n" +
                           "*Build:* #${BUILD_NUMBER}\n" +
                           "*Status:* FAILED",
                  tokenCredentialId: env.SLACK_CREDENTIAL_ID,
                  failOnError: false
                )
              }
            } catch (Exception e) {
              echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
          }
        }
      }
    }
    
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Java-app-CI-CD-with-GitOps"
        GIT_USER_NAME = "khaledhawil"
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'github', passwordVariable: 'GITHUB_TOKEN', usernameVariable: 'GITHUB_USERNAME')]) {
          sh '''
            git config user.email "khaledJenkins@gmail.com"
            git config user.name "Jenkins-user"
            git checkout master || git checkout -b master
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            if ! git diff --quiet spring-boot-app-manifests/deployment.yml; then
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
            else
              echo "No changes to commit"
            fi
          '''
        }
      }
      post {
        success {
          script {
            echo "‚úÖ Deployment File Updated Successfully"
          }
        }
        failure {
          script {
            echo "‚ùå Deployment File Update Failed"
          }
        }
      }
    }
  }
  
  post {
    success {
      script {
        def duration = currentBuild.durationString.replace(' and counting', '')
        echo "üéâ Pipeline Completed Successfully!"
        echo "Duration: ${duration}"
        echo "Docker Image: khaledhawil/java-cicd:${BUILD_NUMBER}"
        echo "Deployment Updated to version: ${BUILD_NUMBER}"
        
        try {
          if (env.SLACK_CREDENTIAL_ID) {
            slackSend(
              channel: env.SLACK_CHANNEL,
              color: 'good',
              message: ":jenkins: *Pipeline Completed Successfully* :tada:\n" +
                       "*Job:* ${JOB_NAME}\n" +
                       "*Build:* #${BUILD_NUMBER}\n" +
                       "*Status:* SUCCESS :white_check_mark:\n" +
                       "*Duration:* ${duration}\n" +
                       "*Docker Image:* khaledhawil/java-cicd:${BUILD_NUMBER}\n" +
                       "*Deployment:* Updated to version ${BUILD_NUMBER}\n" +
                       "*Build URL:* ${BUILD_URL}",
              tokenCredentialId: env.SLACK_CREDENTIAL_ID,
              failOnError: false
            )
          }
        } catch (Exception e) {
          echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
        }
      }
    }
    failure {
      script {
        def duration = currentBuild.durationString.replace(' and counting', '')
        echo "‚ùå Pipeline Failed!"
        echo "Duration: ${duration}"
        echo "Please check the logs for more details"
        
        try {
          if (env.SLACK_CREDENTIAL_ID) {
            slackSend(
              channel: env.SLACK_CHANNEL,
              color: 'danger',
              message: ":jenkins: *Pipeline Failed* :x:\n" +
                       "*Job:* ${JOB_NAME}\n" +
                       "*Build:* #${BUILD_NUMBER}\n" +
                       "*Status:* FAILED :red_circle:\n" +
                       "*Duration:* ${duration}\n" +
                       "*Build URL:* ${BUILD_URL}\n" +
                       "*Console:* ${BUILD_URL}console\n" +
                       "*Please check the logs for more details* :point_up:",
              tokenCredentialId: env.SLACK_CREDENTIAL_ID,
              failOnError: false
            )
          }
        } catch (Exception e) {
          echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
        }
      }
    }
    unstable {
      script {
        def duration = currentBuild.durationString.replace(' and counting', '')
        echo "‚ö†Ô∏è Pipeline Unstable"
        echo "Duration: ${duration}"
        
        try {
          if (env.SLACK_CREDENTIAL_ID) {
            slackSend(
              channel: env.SLACK_CHANNEL,
              color: 'warning',
              message: ":jenkins: *Pipeline Unstable* :warning:\n" +
                       "*Job:* ${JOB_NAME}\n" +
                       "*Build:* #${BUILD_NUMBER}\n" +
                       "*Status:* UNSTABLE :yellow_circle:\n" +
                       "*Duration:* ${duration}\n" +
                       "*Build URL:* ${BUILD_URL}",
              tokenCredentialId: env.SLACK_CREDENTIAL_ID,
              failOnError: false
            )
          }
        } catch (Exception e) {
          echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
        }
      }
    }
    aborted {
      script {
        def duration = currentBuild.durationString.replace(' and counting', '')
        echo "üõë Pipeline Aborted"
        echo "Duration: ${duration}"
        
        try {
          if (env.SLACK_CREDENTIAL_ID) {
            slackSend(
              channel: env.SLACK_CHANNEL,
              color: 'warning',
              message: ":jenkins: *Pipeline Aborted* :stop_sign:\n" +
                       "*Job:* ${JOB_NAME}\n" +
                       "*Build:* #${BUILD_NUMBER}\n" +
                       "*Status:* ABORTED :octagonal_sign:\n" +
                       "*Duration:* ${duration}\n" +
                       "*Build URL:* ${BUILD_URL}",
              tokenCredentialId: env.SLACK_CREDENTIAL_ID,
              failOnError: false
            )
          }
        } catch (Exception e) {
          echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
        }
      }
    }
  }
}
